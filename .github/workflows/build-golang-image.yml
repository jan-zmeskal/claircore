---
name: Publish Golang image

on:
  push:
    branches:
      - build_golang_image
  # schedule:
  #   - cron: '0 * * * *'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  QUAY_ORG: claircore
  QUAY_REPO: golang

jobs:
  check-golang-version:
    name: Check Golang version
    runs-on: 'ubuntu-latest'
    strategy:
      matrix:
        go: ['1.15']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get the latest released minor version of golang
        run: |
          GO_VERSION=`./.github/scripts/get-latest-golang-minor-version.sh ${{ matrix.go }} ${{ matrix.go }}.log`
          echo "The latest released golang version is ${GO_VERSION}"
          echo "GO_VERSION=${GO_VERSION}" >> $GITHUB_ENV
      - name: Archive logfile
        uses: actions/upload-artifact@v2
        with:
          path: ${{ matrix.go }}.log
          name: ${{ matrix.go }}.log
          retention-days: 1
      - name: Determine when quay.io tag was last modified
        run: |
          TAG_LAST_MODIFIED=`curl -s \
            "https://quay.io/api/v1/repository/${QUAY_ORG}/${QUAY_REPO}/tag/?specificTag=${{ matrix.go }}&onlyActiveTags=true" \
            | jq -r '.tags[].last_modified'`
          TAG_LAST_MODIFIED="Wed, 02 Dec 2020 09:09:46 -0000"  # TODO: Remove this!
          echo "TAG_LAST_MODIFIED=${TAG_LAST_MODIFIED}" >> $GITHUB_ENV
      - name: Determine when golang was last modified
        run: |
          GO_LAST_MODIFIED=`curl -sI \
            https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz \
            | awk 'BEGIN {FS=": "}/^last-modified/{print $2}'`
          echo "GO_LAST_MODIFIED=${GO_LAST_MODIFIED}" >> $GITHUB_ENV
      - name: Decide whether we need to build new golang image
        run: |
          TAG=`date -d "${TAG_LAST_MODIFIED}" +%s`
          GO=`date -d "${GO_LAST_MODIFIED}" +%s`
          if [[ $GO -gt $TAG ]]
          then
            echo "BUILD_IMAGE=1" >> $GITHUB_ENV
          else
            echo "BUILD_IMAGE=0" >> $GITHUB_ENV
          fi
      - name: Get checksum for golang
        run: echo "I don't know how to do this programatically"
        if: env.BUILD_IMAGE == 1
      - name: Build golang image
        run: |
          docker build -f etc/Dockerfile -t quay.io/${QUAY_ORG}/${QUAY_REPO}:${{ matrix.go }}\
            --build-arg GO_VERSION=${GO_VERSION} etc
        if: env.BUILD_IMAGE == 1